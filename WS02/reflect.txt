///////////////////////////////////////////////////////////////////////////
 
                                  Reflection
                                 Workshop - #2
Full Name  :  KOJO ANYANE OBESE
Student ID#: 137653226
Email          : kaobese@myseneca.ca
Section        : NEE
 
Authenticity Declaration:
 
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////




1. The discrepancy in the representation of price1 and its converted cent value occurs due to the limitations of floating-point precision. Floating-point numbers have a finite number of bits to represent decimal values, resulting in rounding errors for certain numbers. When price1 is multiplied by 100 to convert it to cents, the rounding error becomes more pronounced, leading to a value slightly less than the expected result. In contrast, price2, price3, and price4, being of type double, have higher precision and experience smaller rounding errors. To ensure accurate financial calculations, it is advisable to use decimal types that provide exact precision or round the floating-point values appropriately during display.


2. These three examples work because they involve conversions and promotions to ensure the correct representation of the dollar amount. The first example implicitly promotes the integer division to a double division due to the presence of the 100.0 literal. The second example explicitly casts the integer money to a double, and the division is performed as a double division. In the third example, the integer money is explicitly cast to a double before division, and the integer 100 is implicitly coerced to a double for the division operation. These conversions and promotions ensure that the output represents the dollar amount accurately with two decimal places.


3. a) The value of the variable result is 72. This is because the expression money / 100 performs integer division, where the fractional part is truncated, and only the integer quotient is assigned to the result.